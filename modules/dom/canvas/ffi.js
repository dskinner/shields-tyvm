export const map = {};
map["canvas"] = map["canvas"] || {};
map["canvas"]["saveN0"] = (obj) => obj.save();
map["canvas"]["restoreN0"] = (obj) => obj.restore();
map["canvas"]["resetN0"] = (obj) => obj.reset();
map["canvas"]["isContextLostN0"] = (obj) => obj.isContextLost();
map["canvas"] = map["canvas"] || {};
map["canvas"]["scaleN2"] = (obj,arg0,arg1) => obj.scale(arg0,arg1);
map["canvas"]["rotateN1"] = (obj,arg0) => obj.rotate(arg0);
map["canvas"]["translateN2"] = (obj,arg0,arg1) => obj.translate(arg0,arg1);
map["canvas"]["transformN6"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5) => obj.transform(arg0,arg1,arg2,arg3,arg4,arg5);
map["canvas"]["setTransformN6"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5) => obj.setTransform(arg0,arg1,arg2,arg3,arg4,arg5);
map["canvas"]["setTransformN0"] = (obj) => obj.setTransform();
map["canvas"]["resetTransformN0"] = (obj) => obj.resetTransform();
map["canvas"] = map["canvas"] || {};
map["canvas"]["globalAlpha"] = (obj, arg) => obj.globalAlpha = arg;
map["canvas"]["globalCompositeOperation"] = (obj, arg) => obj.globalCompositeOperation = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["imageSmoothingEnabled"] = (obj, arg) => obj.imageSmoothingEnabled = arg;
map["canvas"]["imageSmoothingQuality"] = (obj, arg) => obj.imageSmoothingQuality = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["strokeStyle"] = (obj, arg) => obj.strokeStyle = arg;
map["canvas"]["fillStyle"] = (obj, arg) => obj.fillStyle = arg;
map["canvas"]["createLinearGradientN4"] = (obj,arg0,arg1,arg2,arg3) => obj.createLinearGradient(arg0,arg1,arg2,arg3);
map["canvas"]["createRadialGradientN6"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5) => obj.createRadialGradient(arg0,arg1,arg2,arg3,arg4,arg5);
map["canvas"]["createConicGradientN3"] = (obj,arg0,arg1,arg2) => obj.createConicGradient(arg0,arg1,arg2);
map["canvas"] = map["canvas"] || {};
map["canvas"]["shadowOffsetX"] = (obj, arg) => obj.shadowOffsetX = arg;
map["canvas"]["shadowOffsetY"] = (obj, arg) => obj.shadowOffsetY = arg;
map["canvas"]["shadowBlur"] = (obj, arg) => obj.shadowBlur = arg;
map["canvas"]["shadowColor"] = (obj, arg) => obj.shadowColor = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["filter"] = (obj, arg) => obj.filter = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["clearRectN4"] = (obj,arg0,arg1,arg2,arg3) => obj.clearRect(arg0,arg1,arg2,arg3);
map["canvas"]["fillRectN4"] = (obj,arg0,arg1,arg2,arg3) => obj.fillRect(arg0,arg1,arg2,arg3);
map["canvas"]["strokeRectN4"] = (obj,arg0,arg1,arg2,arg3) => obj.strokeRect(arg0,arg1,arg2,arg3);
map["canvas"] = map["canvas"] || {};
map["canvas"]["beginPathN0"] = (obj) => obj.beginPath();
map["canvas"]["fillN0"] = (obj) => obj.fill();
map["canvas"]["fillN1"] = (obj,arg0) => obj.fill(arg0);
map["canvas"]["strokeN0"] = (obj) => obj.stroke();
map["canvas"]["strokeN1"] = (obj,arg0) => obj.stroke(arg0);
map["canvas"]["clipN0"] = (obj) => obj.clip();
map["canvas"]["clipN1"] = (obj,arg0) => obj.clip(arg0);
map["canvas"]["isPointInPathN2"] = (obj,arg0,arg1) => obj.isPointInPath(arg0,arg1);
map["canvas"]["isPointInPathN3"] = (obj,arg0,arg1,arg2) => obj.isPointInPath(arg0,arg1,arg2);
map["canvas"]["isPointInStrokeN2"] = (obj,arg0,arg1) => obj.isPointInStroke(arg0,arg1);
map["canvas"]["isPointInStrokeN3"] = (obj,arg0,arg1,arg2) => obj.isPointInStroke(arg0,arg1,arg2);
map["canvas"] = map["canvas"] || {};
map["canvas"]["drawFocusIfNeededN1"] = (obj,arg0) => obj.drawFocusIfNeeded(arg0);
map["canvas"]["drawFocusIfNeededN2"] = (obj,arg0,arg1) => obj.drawFocusIfNeeded(arg0,arg1);
map["canvas"]["scrollPathIntoViewN0"] = (obj) => obj.scrollPathIntoView();
map["canvas"]["scrollPathIntoViewN1"] = (obj,arg0) => obj.scrollPathIntoView(arg0);
map["canvas"] = map["canvas"] || {};
map["canvas"]["fillTextN3"] = (obj,arg0,arg1,arg2) => obj.fillText(arg0,arg1,arg2);
map["canvas"]["strokeTextN3"] = (obj,arg0,arg1,arg2) => obj.strokeText(arg0,arg1,arg2);
map["canvas"]["measureTextN1"] = (obj,arg0) => obj.measureText(arg0);
map["canvas"] = map["canvas"] || {};
map["canvas"]["drawImageN3"] = (obj,arg0,arg1,arg2) => obj.drawImage(arg0,arg1,arg2);
map["canvas"]["drawImageN5"] = (obj,arg0,arg1,arg2,arg3,arg4) => obj.drawImage(arg0,arg1,arg2,arg3,arg4);
map["canvas"]["drawImageN9"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) => obj.drawImage(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
map["canvas"] = map["canvas"] || {};
map["canvas"]["createImageDataN2"] = (obj,arg0,arg1) => obj.createImageData(arg0,arg1);
map["canvas"]["createImageDataN1"] = (obj,arg0) => obj.createImageData(arg0);
map["canvas"]["getImageDataN4"] = (obj,arg0,arg1,arg2,arg3) => obj.getImageData(arg0,arg1,arg2,arg3);
map["canvas"]["putImageDataN3"] = (obj,arg0,arg1,arg2) => obj.putImageData(arg0,arg1,arg2);
map["canvas"]["putImageDataN7"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5,arg6) => obj.putImageData(arg0,arg1,arg2,arg3,arg4,arg5,arg6);
map["canvas"] = map["canvas"] || {};
map["canvas"]["lineWidth"] = (obj, arg) => obj.lineWidth = arg;
map["canvas"]["lineCap"] = (obj, arg) => obj.lineCap = arg;
map["canvas"]["lineJoin"] = (obj, arg) => obj.lineJoin = arg;
map["canvas"]["miterLimit"] = (obj, arg) => obj.miterLimit = arg;
map["canvas"]["setLineDashN1"] = (obj,arg0) => obj.setLineDash(arg0);
map["canvas"]["lineDashOffset"] = (obj, arg) => obj.lineDashOffset = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["font"] = (obj, arg) => obj.font = arg;
map["canvas"]["textAlign"] = (obj, arg) => obj.textAlign = arg;
map["canvas"]["textBaseline"] = (obj, arg) => obj.textBaseline = arg;
map["canvas"]["direction"] = (obj, arg) => obj.direction = arg;
map["canvas"]["letterSpacing"] = (obj, arg) => obj.letterSpacing = arg;
map["canvas"]["fontKerning"] = (obj, arg) => obj.fontKerning = arg;
map["canvas"]["fontStretch"] = (obj, arg) => obj.fontStretch = arg;
map["canvas"]["fontVariantCaps"] = (obj, arg) => obj.fontVariantCaps = arg;
map["canvas"]["textRendering"] = (obj, arg) => obj.textRendering = arg;
map["canvas"]["wordSpacing"] = (obj, arg) => obj.wordSpacing = arg;
map["canvas"] = map["canvas"] || {};
map["canvas"]["closePathN0"] = (obj) => obj.closePath();
map["canvas"]["moveToN2"] = (obj,arg0,arg1) => obj.moveTo(arg0,arg1);
map["canvas"]["lineToN2"] = (obj,arg0,arg1) => obj.lineTo(arg0,arg1);
map["canvas"]["quadraticCurveToN4"] = (obj,arg0,arg1,arg2,arg3) => obj.quadraticCurveTo(arg0,arg1,arg2,arg3);
map["canvas"]["bezierCurveToN6"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5) => obj.bezierCurveTo(arg0,arg1,arg2,arg3,arg4,arg5);
map["canvas"]["arcToN5"] = (obj,arg0,arg1,arg2,arg3,arg4) => obj.arcTo(arg0,arg1,arg2,arg3,arg4);
map["canvas"]["rectN4"] = (obj,arg0,arg1,arg2,arg3) => obj.rect(arg0,arg1,arg2,arg3);
map["canvas"]["roundRectN4"] = (obj,arg0,arg1,arg2,arg3) => obj.roundRect(arg0,arg1,arg2,arg3);
map["canvas"]["arcN5"] = (obj,arg0,arg1,arg2,arg3,arg4) => obj.arc(arg0,arg1,arg2,arg3,arg4);
map["canvas"]["ellipseN7"] = (obj,arg0,arg1,arg2,arg3,arg4,arg5,arg6) => obj.ellipse(arg0,arg1,arg2,arg3,arg4,arg5,arg6);
